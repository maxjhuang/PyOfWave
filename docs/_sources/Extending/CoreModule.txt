Using PyOfWave's Core module
****************************

.. note:: Not all of these are implemented, but enough to use.

pyofwave_server.core provides facilities that are shared, in various methods, by all protocols and extensions. Specifics for extending this are provided by :doc:`Authentication`, :doc:`DataStorage`, :doc:`Operations`, and :doc:`Protocols`.

core.datasource
===============

.. uml::
   interface DataSource
   object PREFERENCES.STORAGE_OBJECT
   object PREFERENCES.CACHE_OBJECT
   object PREFERENCES.FEDERATION_OBJECT

   zope.interface.Interface ..|> DataSource

   DataSource <|.. PREFERENCES.STORAGE_OBJECT

   DataSource : newDocument()
   DataSource : getDocument(string url)
   DataSource : getDocumentVersion(string url, int start, int end, int limit)
   DataSource : searchDocuments(string user, string search)
   DataSource : setTags(string doc, string user, string[] **tags)

The interface DataSource provides access to persistant XML following the wave schema. LXML is used to represent the XML files.

.. py:method:: newDocument()

   Creates a new document in the DataSource. Returns the 
   blank :py:class:`lxml.etree.ElementBase` object if successful. 

.. py:method:: getDocument(url)

   Loads the document from the DataSource. Returns a :py:class:`lxml.etree.ElementBase` object. 

.. py:method:: getDocumentVersion(url, start, end, limit)

   Loads the document at the specified times. Returns a iterable of :py:class:`lxml.etree.ElementBase` objects. 

.. py:method:: searchDocuments(user, search)

   Returns a list of wave URLs to documents that match the search in the form of an xQuery conditional :py:class:`String` object.

core.delta
==========

.. uml::
   object AlphaDeltaObservable
   object BetaDeltaObservable

   DeltaObservable ..|> AlphaDeltaObservable
   DeltaObservable ..|> BetaDeltaObservable

   DeltaObservable : applyDelta(lxml.etree.ElementBase doc, lxml.etree.ElementBase delta)
   DeltaObservable : addObserver(callable observer)
   DeltaObservable : removeObserver(callable observer)

:py:mod:`core.delta`, provides a classic Observer interface. This module is used to distribute changes to documents, \"deltas\", generated by the operations in the Wave Protocol. These deltas can be in either \"alpha\" or \"beta\" state (after and before being commited to storage). 

Any one has the ability to distribute deltas on a :py:class:`DeltaObservable`, but you should only do it on :py:data:`BetaDeltaObservable` leaving :py:class:`DataSource` objects to distribute on :py:data:`AlphaDeltaObservable`, so as that the Deltas distributed there are truly in alpha state.

Use the :py:func:`applyDelta` function to apply a delta to XML. This is mostly for persistance extensions.

.. py:function:: applyDelta(doc, delta)

  .. note:: Not yet implemented.

  Combines the LXML eTree elements passed to it. An attribute of `{pyofwave.info/delta}d` controls how the delta is applied.

  A value of `"delete"` removes the corresponding attribute. `"replace"` replaces all content of the element.

  The ID value (`{http://pyofwave.info/2012/wave-xmpp/wave}src` in commoncase Wave XML) selects current element by ID or creates a new one. 

DeltaObservable
---------------

:py:class:`DeltaObservable` distributes :py:class:`Delta` objects throughout all extensions. 

.. py:class:: DeltaObservable

  Distributes deltas between different components of PyOfWave server.

  .. py:method:: applyDelta(doc, delta)

    Notifies all observers that doc has/will (depending on object) had the changes in delta applied. 

    Delta is a partial LXML tree with :py:data:`delete` properties marking elements to remove.

  .. py:method:: addObserver(observer, url = "")

    Calls *observer* when :py:meth:`applyDelta` is called, passing the same arguments.

  .. py:method:: removeObserver(observer)

    Stops calling *observer*.

There's two instances of this class you'll use to distribute :py:class:`Delta` objects:

.. py:data:: AlphaDeltaObservable

   :py:class:`DataSource` objects pushes deltas through this 
   :py:class:`DeltaObservable`, which indicates that all :py:class:`Delta` 
   objects from this object has been commited to storage.

.. py:data:: BetaDeltaObservable

   :py:class:`DataSource` objects are observers of this object, which means 
   that by sending :py:class:`Delta` objects on this object, you are 
   commiting them to memory.

core.operation
==============

:py:mod:`core.operation` has only one function, which imports a function from pyofwave_server.operations and executes it with given arguments. 

.. py:function:: performOperation(event, operation)

   Executes the operation (an :py:class:`lxml.eTree.Element` object) operation and 
   provides the event, operation's children, and operations attributes. 

   Returns the element returned by the operation. Notifies observers 
   (via :py:class:`Events`) about the *event* operation.

.. py:class:: Events

   Handles notification of selected events.

   .. py:method:: __init__(user, callback)

      Initiates an object for user identified by *user*, and calls *callback* to notify the caller of new events.

   .. py:method:: register(url, event)

      Starts notifying the callback when *event* happens in document identified by *url*. *event* is either an :py:class:`Operation` or a :py:class:`String`.

   .. py:method:: unregister(url, event = "*")

      Stops notifying the callback when *event* happens in document identified by *url*.

   .. py:data:: user

      The Wave Address for the user.

opdev.OperationNS
-----------------

OperationNS is the plugin system for adding operations. It is a class with the following methods:

.. py:class:: OperationNS(object)

   Operation plugin system.

   .. py:method:: __init__(namespace)

      Initializes with the given *namespace*.

   .. py:method:: receive(callback)

      Decorator, registers an operation of `callback.__name__` under 
      *namespace* which calls *callback* . Preceding underscores are 
      stripped.

      *callback* returns an optional eTree element.

   .. py:method:: shouldSend(xQuery)

      .. note:: Not yet implemented.

      Returns a decorator which decides whether a delta constitutes 
      as an event for the element named by the decorated function. 

      Decorated function returns an eTree Element or :py:data:`False` 
      value and takes an :py:class:`ElementMaker` factory for it's 
      element, the selected tag, and it's delta. 

      `(S, tag, delta) -> False or lxml.eTree.Element object`

   .. py:method:: __call__(arg)

      Depending on whether arg is a callable or string, forwards to 
      :py:meth:`receive` or :py:meth:`shouldSend`.

   .. py:data:: E

      ElementMaker factory for *namespace*. 

Instructions for adding operations are in :doc:`Operations`.

As a utility to use with :py:meth:`OperationNS.shouldSend`, :py:func:`rawElement` is provided which just returns the element it is passed. 