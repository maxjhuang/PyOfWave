Wave Protocal
-------------

Job: Provides a protocol for Wave clients and servers to communicate with.
Existing Standards: XMPP (BOSH optional, integrates TCP/IP & XML).


NOTE: DTDs are updated, and this should follow.

Language
--------

The wave structure can be seen in wave.dtd.
Wave Provider  --  A Domain Name which can be sent Wave Protocol packets.
wave  --  A container for a number of "wavelets" which appears in search results.
wavelet  -- A sequence of "posts" which can only be viewed by specific "Wave Addresses". Contains tags.
datadoc  --  A hashtable in place of a post, has an ID. Can be public with anyone on the wave or private to the user.
tag  --  A user defined name with optional value which can be private to the user or public with anyone on the wave.
post  --  An read/write rich text message. Includes a reply "thread" and "tags". Content can include text, "annotations", "attachments", and "inputs" as well as "threads" and "wavelets".
threads  --  A sequence of "posts".
annotation  --  A key-value pair spanning some text.
attachment  --  A URL link to a file.
input  --  A method of user input, simalor to the HTML input element. 
	Should be provided by OS, but not necessarily.
Wave Address  --  A JID which accepts Wave stanzas. 

User terms (implementation wise, these are the same or simalor to previous terms, but has a distinction for users):
robot  --  A Wave Address backed by automated software rather than a human.
gadget  --  An attachment of type "text/javascript+wave" and has access to a public and/or private datadoc.

Improvements on Previous Protocols
----------------------------------

a) Removing layers of abstraction, simplifying the protocol.

b) Uses XML for serialization of "method" calls.

c) Integrates all Wave protocols into adding more flexibility and removing complication to simplify implementation.

d) Reduce the "failure zone" when a Wave Provider  fails. Users on other providers would still be able to access and edit the wave created by the Wave Provider taken offline. 

Format
------

The Wave Protocol uses XMPP as it's underlying protocol, with the XML elements representing actions or data "passed" to these actions. 

A number of XML namespaces are employed, with the main ones being:

- events
	Controls which "events", or actions performed, the client is sent. 
	Any tag (with a few exceptions) can be registered to as an event, 
	allowing servers to handle other servers in near the same way as a 
	client.
	The client is sent their own actions in confirmation.
- wave
	Represents the structure of a wave.

"Wave Protocol DTDs" contains DTDs for these namespaces.

All root elements can be placed directly inside XMPP stream and iq element, and be configured to be sent to the client using the events stanzas. 

XMPP Dependancy
---------------

XMPP features which MUST be implemented are:

- SASL
- iq stanzas
- roster
- presence

This does not prevent Wave Providers from implementing more XMPP features, but those should not be used in the events namespace as an event between Wave Providers. 

Roster Differences
------------------

Due to extra data in the roster, it's behaviour is extended. Values a client hasn't filled in on a roster should match the values on that account's "own" roster item (their address in their roster). 

Federation Records
------------------

The server account SHOULD have in it's roster all it's user's own roster items. 

It MAY also have records of type "Gadget" listing all it's known gadgets. This would be a useful aid for users to find useful gadgets.
